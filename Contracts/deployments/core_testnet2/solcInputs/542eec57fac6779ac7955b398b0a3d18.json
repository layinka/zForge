{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\npragma solidity >=0.8.4;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\n\npragma solidity >=0.4.16;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /// @inheritdoc IERC20\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @inheritdoc IERC20\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/interfaces/IPTToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title IPTToken\n * @dev Interface for Principal Token (PT) representing the principal component of SY tokens\n */\ninterface IPTToken is IERC20 {\n    // Custom errors\n    error TokenHasNotMaturedYet();\n    error TokenHasMatured();\n    error InvalidSYTokenAddress();\n    error InsufficientPTBalance();\n    error RedemptionNotEnabled();\n    error AmountMustBeGreaterThanZero();\n    \n    // Events\n    event Redeem(address indexed user, uint256 ptAmount, uint256 underlyingAmount);\n    \n    // State variables\n    // function syToken() external view returns (address);\n    function maturity() external view returns (uint256);\n    function redeemable() external view returns (bool);\n    \n    // Functions\n    function mint(address to, uint256 amount) external;\n    function burn(address from, uint256 amount) external;\n    function enableRedemption() external;\n    function redeem(uint256 amount) external;\n    function hasMatured() external view returns (bool);\n    function timeToMaturity() external view returns (uint256);\n    function getRedemptionRate() external pure returns (uint256);\n}\n"
    },
    "contracts/interfaces/IYTToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title IYTToken\n * @dev Interface for Yield Token (YT) representing the yield component of SY tokens\n */\ninterface IYTToken is IERC20 {\n    // Custom errors\n    error TokenHasExpired();\n    error InvalidSYTokenAddress();\n    error NoYieldToClaim();\n    \n    // Events\n    event YieldClaimed(address indexed user, uint256 yieldAmount);\n    \n    // State variables\n    // function syToken() external view returns (address);\n    function maturity() external view returns (uint256);\n    \n    // Functions\n    function mint(address to, uint256 amount) external;\n    function burn(address from, uint256 amount) external;\n    function getClaimableYield(address user) external view returns (uint256);\n    function claimYield() external;\n    function hasExpired() external view returns (bool);\n    function timeToExpiry() external view returns (uint256);\n    function getTotalYieldClaimed(address user) external view returns (uint256);\n    function lastClaimTime(address user) external view returns (uint256);\n    function totalYieldClaimed(address user) external view returns (uint256);\n}\n"
    },
    "contracts/PTToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./SYToken.sol\";\nimport \"./interfaces/IPTToken.sol\";\n\n/**\n * @title PTToken\n * @dev Principal Token representing the principal component of SY tokens\n */\ncontract PTToken is ERC20, Ownable,IPTToken {\n    \n    \n    SYToken public immutable syToken;\n    uint256 public immutable maturity;\n    bool public redeemable;\n    \n    // event Redeem(address indexed user, uint256 ptAmount, uint256 underlyingAmount);\n    \n    modifier onlyAfterMaturity() {\n        if (block.timestamp < maturity) revert TokenHasNotMaturedYet();\n        _;\n    }\n    \n    modifier onlyBeforeMaturity() {\n        if (block.timestamp >= maturity) revert TokenHasMatured();\n        _;\n    }\n    \n    constructor(\n        address _syToken,\n        string memory _name,\n        string memory _symbol\n    ) ERC20(_name, _symbol) Ownable(msg.sender) {\n        if (_syToken == address(0)) revert InvalidSYTokenAddress();\n        \n        syToken = SYToken(_syToken);\n        maturity = syToken.maturity();\n        redeemable = false;\n    }\n    \n    /**\n     * @dev Mint PT tokens (only callable by SYFactory)\n     */\n    function mint(address to, uint256 amount) external onlyOwner onlyBeforeMaturity {\n        _mint(to, amount);\n    }\n    \n    /**\n     * @dev Burn PT tokens (only callable by SYFactory)\n     */\n    function burn(address from, uint256 amount) external onlyOwner {\n        _burn(from, amount);\n    }\n    \n    /**\n     * @dev Enable redemption after maturity\n     */\n    function enableRedemption() external onlyOwner onlyAfterMaturity {\n        redeemable = true;\n    }\n    \n    /**\n     * @dev Redeem PT tokens for underlying tokens after maturity\n     */\n    function redeem(uint256 amount) external onlyAfterMaturity {\n        if (!redeemable) revert RedemptionNotEnabled();\n        if (amount == 0) revert AmountMustBeGreaterThanZero();\n        if (balanceOf(msg.sender) < amount) revert InsufficientPTBalance();\n        \n        // Burn PT tokens\n        _burn(msg.sender, amount);\n        \n        // Transfer underlying tokens from SY contract\n        syToken.underlyingToken().transfer(msg.sender, amount);\n        \n        emit Redeem(msg.sender, amount, amount);\n    }\n    \n    /**\n     * @dev Check if token has matured\n     */\n    function hasMatured() external view returns (bool) {\n        return block.timestamp >= maturity;\n    }\n    \n    /**\n     * @dev Get time until maturity\n     */\n    function timeToMaturity() external view returns (uint256) {\n        if (block.timestamp >= maturity) {\n            return 0;\n        }\n        return maturity - block.timestamp;\n    }\n    \n    /**\n     * @dev Get redemption rate (always 1:1 for PT)\n     */\n    function getRedemptionRate() external pure returns (uint256) {\n        return 1e18; // 1:1 ratio\n    }\n}\n"
    },
    "contracts/SYFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"./SYToken.sol\";\nimport \"./PTToken.sol\";\nimport \"./YTToken.sol\";\n\n\n/**\n * @title SYFactory - Yield Tokenization Factory\n * @dev Enhanced factory contract for creating and managing yield-bearing tokens with user-chosen maturities\n * \n * This contract provides three main user flows for yield tokenization:\n * \n * 1. SY TOKENS ONLY (wrapWithMaturity):\n *    - For users who want simple yield-bearing exposure\n *    - SY tokens automatically earn yield until maturity\n *    - Single token to manage, composable with other DeFi protocols\n *    - Can be split later when market conditions are favorable\n *    - Use cases: yield farming, liquidity provision, collateral, hold-and-earn strategies\n * \n * 2. PT + YT TOKENS (wrapAndSplit):\n *    - For users who want to separate principal and yield\n *    - Most common flow for advanced yield strategies\n *    - Single transaction combines wrap + split for gas efficiency\n *    - Use cases: yield trading, arbitrage, portfolio diversification, risk management\n * \n * 3. EXISTING SY TOKENS (split):\n *    - For users who already hold SY tokens from other sources\n *    - Allows timing strategies and partial splitting\n *    - Use cases: received SY tokens, market timing, partial position management\n * \n * TOKEN TYPES:\n * - SY (Standardized Yield): Yield-bearing tokens that represent principal + yield\n * - PT (Principal Token): Fixed-value tokens redeemable for underlying at maturity\n * - YT (Yield Token): Tokens that capture all yield generated until maturity\n * \n * ARCHITECTURE:\n * - Multi-maturity support: Multiple SY tokens per underlying with different maturities\n * - User-chosen maturities: Users can create custom maturity periods\n * - Atomic operations: wrapAndSplit ensures all-or-nothing execution\n * - Gas optimization: Combined operations reduce transaction costs\n */\ncontract SYFactory is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n    // Custom errors\n    error InvalidUnderlyingToken();\n    error MaturityTooSoon();\n    error MaturityTooFar();\n    error MaturityAlreadyExists();\n    error InsufficientFee();\n    error SYTokenDoesNotExist();\n    error SYTokenHasMatured();\n    error NoMaturityOptionsAvailable();\n    error NoValidMaturityOptionsAvailable();\n    error TokenPairDoesNotExist();\n    error InsufficientSYBalance();\n    error InsufficientPTBalance();\n    error InsufficientYTBalance();\n    error PTTokenHasNotMatured();\n    error NoPTTokensToRedeem();\n    error YTTokenHasExpired();\n    error NoYieldToClaim();\n    \n    struct TokenPair {\n        address pt;\n        address yt;\n        bool exists;\n    }\n    \n    struct MaturityOption {\n        uint256 maturity;\n        address syToken;\n        bool active;\n    }\n    \n    // New mapping structure: underlying => maturity => SY token address\n    mapping(address => mapping(uint256 => address)) public underlyingToSYByMaturity;\n    \n    // Track all maturity options for each underlying\n    mapping(address => uint256[]) public availableMaturities;\n    // mapping(address => mapping(uint256 => bool)) public maturityExists;\n    \n    // Keep existing mappings for backward compatibility\n    mapping(address => TokenPair) public syTokenPairs; // SY token => PT/YT pair\n    address[] public allSYTokens;\n    address[] public underlyingTokens; // Track all underlying tokens\n    \n    // Configuration\n    uint256 public constant MIN_MATURITY_DURATION = 1 days;\n    uint256 public constant MAX_MATURITY_DURATION = 100 * 365 days; // 100 years\n    uint256 public maturityCreationFee = 0; // Fee in wei to create new maturity option\n    \n    event SYTokenCreated(\n        address indexed underlying,\n        address indexed syToken,\n        uint256 maturity,\n        uint256 yieldRate,\n        address indexed creator\n    );\n    \n    event MaturityOptionAdded(\n        address indexed underlying,\n        uint256 maturity,\n        address indexed syToken\n    );\n    \n    event TokensWrapped(\n        address indexed user,\n        address indexed underlying,\n        address indexed syToken,\n        uint256 amount,\n        uint256 maturity\n    );\n    \n    event TokensSplit(\n        address indexed user,\n        address indexed syToken,\n        uint256 amount,\n        address ptToken,\n        address ytToken\n    );\n    \n    event TokensMerged(\n        address indexed user,\n        address indexed syToken,\n        uint256 amount,\n        address ptToken,\n        address ytToken\n    );\n    \n    event PTRedeemed(\n        address indexed user,\n        address indexed ptToken,\n        uint256 amount\n    );\n    \n    event YieldClaimed(\n        address indexed user,\n        address indexed ytToken,\n        uint256 yieldAmount\n    );\n\n    constructor() Ownable(msg.sender) {}\n    \n    /**\n     * @dev Create a new SY token for an underlying asset with specific maturity\n     * @param underlying The underlying asset address\n     * @param maturity The maturity timestamp\n     * @param name Token name\n     * @param symbol Token symbol  \n     * @param yieldRate Annual yield rate in basis points\n     */\n    function createSYToken(\n        address underlying,\n        uint256 maturity,\n        string memory name,\n        string memory symbol,\n        uint256 yieldRate\n    ) external payable nonReentrant returns (address) {\n        if (underlying == address(0)) revert InvalidUnderlyingToken();\n        if (maturity <= block.timestamp + MIN_MATURITY_DURATION) revert MaturityTooSoon();\n        if (maturity > block.timestamp + MAX_MATURITY_DURATION) revert MaturityTooFar();\n        if (underlyingToSYByMaturity[underlying][maturity] != address(0)) revert MaturityAlreadyExists();\n        if (msg.value < maturityCreationFee) revert InsufficientFee();\n        \n        // Create SY token\n        SYToken syToken = new SYToken(\n            underlying,\n            maturity,\n            string(abi.encodePacked(\"Standardized Yield \", name)),\n            string(abi.encodePacked(\"SY-\", symbol)) ,\n            yieldRate\n        );\n        \n        // Create PT and YT tokens\n        string memory ptName = string(abi.encodePacked(\"PT-\", name));\n        string memory ptSymbol = string(abi.encodePacked(\"PT-\", symbol));\n        string memory ytName = string(abi.encodePacked(\"YT-\", name));\n        string memory ytSymbol = string(abi.encodePacked(\"YT-\", symbol));\n        \n        PTToken ptToken = new PTToken(address(syToken), ptName, ptSymbol);\n        YTToken ytToken = new YTToken(address(syToken), ytName, ytSymbol);\n        \n        // Store the pair\n        syTokenPairs[address(syToken)] = TokenPair({\n            pt: address(ptToken),\n            yt: address(ytToken),\n            exists: true\n        });\n        \n        // Update mappings\n        underlyingToSYByMaturity[underlying][maturity] = address(syToken);\n        availableMaturities[underlying].push(maturity);\n        // maturityExists[underlying][maturity] = true;\n        allSYTokens.push(address(syToken));\n        \n        // Add underlying token to list if it's the first time\n        if (availableMaturities[underlying].length == 1) {\n            underlyingTokens.push(underlying);\n        }\n        \n        emit SYTokenCreated(underlying, address(syToken), maturity, yieldRate, msg.sender);\n        emit MaturityOptionAdded(underlying, maturity, address(syToken));\n        \n        return address(syToken);\n    }\n    \n    /**\n     * @dev Get all available maturities for an underlying asset\n     */\n    function getAvailableMaturities(address underlying) external view returns (uint256[] memory) {\n        return availableMaturities[underlying];\n    }\n    \n    /**\n     * @dev Get SY token address for specific underlying and maturity\n     */\n    function getSYTokenByMaturity(address underlying, uint256 maturity) external view returns (address) {\n        return underlyingToSYByMaturity[underlying][maturity];\n    }\n\n    /**\n     * @dev Get PT and YT token addresses for a SY token\n     */\n    function getTokenPairByStToken(address syToken) external view returns (address pt, address yt) {\n        TokenPair memory pair = syTokenPairs[syToken];\n        require(pair.exists, \"Token pair does not exist\");\n        return (pair.pt, pair.yt);\n    }\n    \n    // /**\n    //  * @dev Check if a maturity option exists for an underlying\n    //  */\n    // function hasMaturityOption(address underlying, uint256 maturity) external view returns (bool) {\n    //     return underlyingToSYByMaturity[underlying][maturity] != address(0);\n    // }\n    \n    /**\n     * @dev Get all underlying tokens that have SY tokens created\n     */\n    function getAllUnderlyingTokens() external view returns (address[] memory) {\n        return underlyingTokens;\n    }\n    \n    /**\n     * @dev Wrap underlying tokens into SY tokens with specific maturity\n     * \n     * This function creates SY tokens without splitting them into PT + YT.\n     * SY tokens are yield-bearing and represent the full value (principal + yield).\n     * \n     * USE CASES FOR wrapWithMaturity() (SY tokens only):\n     * - Yield Farming: SY tokens automatically earn yield without complexity\n     * - Simpler Strategy: Single token exposure instead of managing PT + YT separately\n     * - Lower Gas: No additional split transaction required\n     * - Liquidity Provision: Use SY tokens in AMM pools or lending protocols\n     * - Hold and Earn: Set-and-forget yield earning strategy\n     * - Collateral: Use SY tokens as collateral in other DeFi protocols\n     * - Future Flexibility: Keep SY tokens to split later when market conditions change\n     * \n     * BENEFITS OF SY TOKENS:\n     * - Automatic yield accrual (no claiming required)\n     * - Single token to manage\n     * - Can be split later using split() function\n     * - Full exposure to underlying asset performance\n     * - Composable with other DeFi protocols\n     * \n     * @param underlying The underlying token address to wrap\n     * @param amount The amount of underlying tokens to wrap\n     * @param maturity The maturity timestamp for the SY token\n     * @return syTokenAddress The address of the created SY token\n     */\n    function wrapWithMaturity(\n        address underlying, \n        uint256 amount, \n        uint256 maturity\n    ) external nonReentrant returns (address) {\n        address syTokenAddress = underlyingToSYByMaturity[underlying][maturity];\n        if (syTokenAddress == address(0)) revert SYTokenDoesNotExist();\n        \n        SYToken syToken = SYToken(syTokenAddress);\n        if (syToken.hasMatured()) revert SYTokenHasMatured();\n        \n        // Direct call - SYToken handles all transfers internally\n        // User → SYToken (no factory middleman)\n        syToken.wrapFrom(msg.sender, amount);\n        \n        emit TokensWrapped(msg.sender, underlying, syTokenAddress, amount, maturity);\n        \n        return syTokenAddress;\n    }\n\n    // /**TODO\n    //  * @dev Split SY tokens into PT and YT tokens\n    //  * \n    //  * USE CASES FOR split() (separate from wrapAndSplit):\n    //  * - Users who already hold SY tokens and want to split them later\n    //  * - Users who received SY tokens from other sources (transfers, rewards, etc.)\n    //  * - Timing strategies: wrap first, split when market conditions are favorable\n    //  * - Partial splitting: split only a portion of held SY tokens\n    //  */\n    // function split(address syTokenAddress, uint256 amount) public nonReentrant returns (address, address) {\n    //     return _split(syTokenAddress, amount, msg.sender, msg.sender);\n    // }\n    \n    /**\n     * @dev Internal split function that can handle different token holders and recipients\n     * @param syTokenAddress Address of the SY token to split\n     * @param amount Amount of SY tokens to split\n     * @param tokenHolder Address that currently holds the SY tokens\n     * @param recipient Address that will receive the PT and YT tokens\n     */\n    function _split(address syTokenAddress, uint256 amount, address tokenHolder, address recipient) internal returns (address, address) {\n        TokenPair memory pair = syTokenPairs[syTokenAddress];\n        if (!pair.exists) revert TokenPairDoesNotExist();\n        \n        SYToken syToken = SYToken(syTokenAddress);\n        PTToken ptToken = PTToken(pair.pt);\n        YTToken ytToken = YTToken(pair.yt);\n        \n        if (syToken.hasMatured()) revert SYTokenHasMatured();\n        \n        // Debug: Check balance before split\n        uint256 currentBalance = syToken.balanceOf(tokenHolder);\n\n\n        \n        if (currentBalance < amount) {\n\n            revert InsufficientSYBalance(); // Debug: This will show if error is from _split\n        }\n        \n        // if (syToken.balanceOf(tokenHolder) < amount) revert InsufficientSYBalance();\n        \n        // Burn SY tokens from token holder\n        if (tokenHolder == address(this)) {\n            // If factory holds the tokens, use burnFrom\n            syToken.burnFrom(address(this), amount);\n        } else {\n            // If user holds the tokens, transfer to factory (effectively burning)\n            syToken.transferFrom(tokenHolder, address(this), amount);\n        }\n        \n        // Mint PT and YT tokens to recipient\n        ptToken.mint(recipient, amount);\n        ytToken.mint(recipient, amount);\n        \n        emit TokensSplit(recipient, syTokenAddress, amount, pair.pt, pair.yt);\n        \n        return (pair.pt, pair.yt);\n    }\n    \n    \n    \n    \n    /**\n     * @dev Wrap underlying tokens and immediately split into PT + YT tokens\n     * \n     * This is a convenience function that combines wrapWithMaturity() + split() into a single transaction.\n     * It's the most common user flow for yield tokenization strategies.\n     * \n     * USE CASES FOR wrapAndSplit():\n     * - Yield Trading: Sell YT tokens for upfront yield, keep PT for principal protection\n     * - Separate Strategies: Trade PT and YT tokens independently on secondary markets\n     * - Arbitrage: Take advantage of pricing differences between PT/YT vs SY tokens\n     * - Portfolio Diversification: Hold different risk profiles (PT = principal, YT = yield)\n     * - Gas Efficiency: Single transaction instead of wrap() + split()\n     * \n     * BENEFITS:\n     * - Single transaction (lower gas cost)\n     * - Single approval required\n     * - Atomic operation (all or nothing)\n     * - Better user experience\n     * \n     * @param underlying The underlying token address to wrap\n     * @param amount The amount of underlying tokens to wrap and split\n     * @param maturity The maturity timestamp for the SY token\n     * @return syTokenAddress The SY token address (for reference)\n     * @return ptTokenAddress The PT token address\n     * @return ytTokenAddress The YT token address\n     */\n    function wrapAndSplit(\n        address underlying, \n        uint256 amount, \n        uint256 maturity\n    ) external nonReentrant returns (address, address, address) {\n        // Get SY token address for the specified maturity\n        address syTokenAddress = underlyingToSYByMaturity[underlying][maturity];\n        if (syTokenAddress == address(0)) revert SYTokenDoesNotExist();\n        \n        SYToken syToken = SYToken(syTokenAddress);\n        if (syToken.hasMatured()) revert SYTokenHasMatured();\n        \n        // Get PT/YT token pair for this SY token\n        TokenPair memory pair = syTokenPairs[syTokenAddress];\n        if (!pair.exists) revert TokenPairDoesNotExist();\n        \n        // Step 1: Transfer underlying tokens from user to factory\n        IERC20 underlyingToken = IERC20(underlying);\n        underlyingToken.transferFrom(msg.sender, address(this), amount);\n\n        \n        // Step 2: Mint SY tokens to factory (temporary accounting)\n        syToken.mintTo(address(this), amount);\n\n\n        \n        // Step 3: Use internal split function (factory holds SY, user gets PT+YT)\n\n        _split(syTokenAddress, amount, address(this), msg.sender);\n        \n        // Emit wrap event (split event emitted by _split)\n        emit TokensWrapped(msg.sender, underlying, syTokenAddress, amount, maturity);\n        \n        return (syTokenAddress, pair.pt, pair.yt);\n    }\n    \n    \n    /**\n     * @dev Merge PT and YT tokens back into SY tokens\n     */\n    function merge(address syTokenAddress, uint256 amount) external nonReentrant returns (address) {\n\n        TokenPair memory pair = syTokenPairs[syTokenAddress];\n        if (!pair.exists) revert TokenPairDoesNotExist();\n\n        SYToken syToken = SYToken(syTokenAddress);\n        PTToken ptToken = PTToken(pair.pt);\n        YTToken ytToken = YTToken(pair.yt);\n        \n        if (syToken.hasMatured()) revert SYTokenHasMatured();\n        if (ptToken.balanceOf(msg.sender) < amount) revert InsufficientPTBalance();\n        if (ytToken.balanceOf(msg.sender) < amount) revert InsufficientYTBalance();\n\n        // Burn PT and YT tokens\n        ptToken.burn(msg.sender, amount);\n        ytToken.burn(msg.sender, amount);\n\n        //TODO: Mint SY tokens to user \n        // syToken.mintTo(msg.sender, amount);\n\n        // Transfer underlying tokens to user using SafeERC20\n        IERC20 underlyingToken = IERC20(syToken.underlyingToken());\n\n        // underlyingToken.safeTransfer(msg.sender, amount);\n        underlyingToken.safeTransferFrom(syTokenAddress,msg.sender, amount);\n        \n        emit TokensMerged(msg.sender, syTokenAddress, amount, pair.pt, pair.yt);\n        \n        return syTokenAddress;\n    }\n    \n    /**\n     * @dev Redeem PT tokens for underlying after maturity\n     */\n    function redeemPT(address ptTokenAddress) external nonReentrant {\n        PTToken ptToken = PTToken(ptTokenAddress);\n        if (!ptToken.hasMatured()) revert PTTokenHasNotMatured();\n        \n        uint256 balance = ptToken.balanceOf(msg.sender);\n        if (balance == 0) revert NoPTTokensToRedeem();\n        \n        ptToken.redeem(balance);\n        \n        emit PTRedeemed(msg.sender, ptTokenAddress, balance);\n    }\n    \n    /**\n     * @dev Claim yield from YT tokens\n     */\n    function claimYT(address ytTokenAddress) external nonReentrant {\n        YTToken ytToken = YTToken(ytTokenAddress);\n        if (ytToken.hasExpired()) revert YTTokenHasExpired();\n        \n        uint256 yieldAmount = ytToken.getClaimableYield(msg.sender);\n        if (yieldAmount == 0) revert NoYieldToClaim();\n        \n        ytToken.claimYield();\n        \n        emit YieldClaimed(msg.sender, ytTokenAddress, yieldAmount);\n    }\n    \n    /**\n     * @dev Get all SY tokens\n     */\n    function getAllSYTokens() external view returns (address[] memory) {\n        return allSYTokens;\n    }\n    \n    //Todo : \n    // /**\n    //  * @dev Set maturity creation fee (only owner)\n    //  */\n    // function setMaturityCreationFee(uint256 _fee) external onlyOwner {\n    //     maturityCreationFee = _fee;\n    // }\n    \n    // /**\n    //  * @dev Withdraw collected fees (only owner)\n    //  */\n    // function withdrawFees() external onlyOwner {\n    //     payable(owner()).transfer(address(this).balance);\n    // }\n    \n    /**\n     * @dev Get maturity info for an underlying asset\n     */\n    function getMaturityInfo(address underlying) external view returns (\n        uint256[] memory maturities,\n        address[] memory syTokens,\n        bool[] memory active\n    ) {\n        uint256[] memory availMaturities = availableMaturities[underlying];\n        uint256 length = availMaturities.length;\n        \n        maturities = new uint256[](length);\n        syTokens = new address[](length);\n        active = new bool[](length);\n        \n        for (uint256 i = 0; i < length; i++) {\n            uint256 maturity = availMaturities[i];\n            maturities[i] = maturity;\n            syTokens[i] = underlyingToSYByMaturity[underlying][maturity];\n            active[i] = maturity > block.timestamp;\n        }\n    }\n}\n"
    },
    "contracts/SYToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n//\n\n/**\n * @title SYToken\n * @dev Standardized Yield Token that wraps yield-bearing assets\n */\ncontract SYToken is ERC20, Ownable, ReentrancyGuard {\n    // Custom errors\n    error InvalidUnderlyingToken();\n    error MaturityMustBeInFuture();\n    error AmountMustBeGreaterThanZero();\n    error TokenHasMatured();\n    error InsufficientSYBalance();\n    error NoYieldToClaim();\n    error OnlyFactoryCanCall();\n    error InsufficientBalance();\n    IERC20 public immutable underlyingToken;\n    uint256 public immutable maturity;\n    uint256 public yieldRate; // Annual yield rate in basis points (e.g., 500 = 5%)\n    uint256 public lastYieldUpdate;\n    uint256 public totalYieldAccrued;\n    \n    mapping(address => uint256) public lastClaimTime;\n    \n    event Wrap(address indexed user, uint256 underlyingAmount, uint256 syAmount);\n    event Unwrap(address indexed user, uint256 syAmount, uint256 underlyingAmount);\n    event YieldClaimed(address indexed user, uint256 yieldAmount);\n    \n    constructor(\n        address _underlyingToken,\n        uint256 _maturity,\n        string memory _name,\n        string memory _symbol,\n        uint256 _yieldRate\n    ) ERC20(_name, _symbol) Ownable(msg.sender) {\n        if (_underlyingToken == address(0)) revert InvalidUnderlyingToken();\n        if (_maturity <= block.timestamp) revert MaturityMustBeInFuture();\n        \n        underlyingToken = IERC20(_underlyingToken);\n        maturity = _maturity;\n        yieldRate = _yieldRate;\n        lastYieldUpdate = block.timestamp;\n    }\n    \n    /**\n     * @dev Wrap underlying tokens into SY tokens\n     */\n    function wrap(uint256 amount) external nonReentrant {\n        _wrapInternal(msg.sender, amount);\n    }\n    \n    /**\n     * @dev Wrap underlying tokens into SY tokens on behalf of a user (called by SYFactory)\n     * @param from The user address to wrap tokens for\n     * @param amount Amount of underlying tokens to wrap\n     */\n    function wrapFrom(address from, uint256 amount) external nonReentrant {\n        // Only allow SYFactory to call this function\n        if (owner() != msg.sender) revert OnlyFactoryCanCall();\n        _wrapInternal(from, amount);\n    }\n    \n    /**\n     * @dev Internal wrap logic shared by wrap() and wrapFrom()\n     * @param user The user address to wrap tokens for\n     * @param amount Amount of underlying tokens to wrap\n     */\n    function _wrapInternal(address user, uint256 amount) internal {\n        if (amount == 0) revert AmountMustBeGreaterThanZero();\n        if (block.timestamp >= maturity) revert TokenHasMatured();\n        \n        // Transfer underlying tokens from user to this contract\n        underlyingToken.transferFrom(user, address(this), amount);\n        \n        // Update yield before minting\n        _updateYield();\n        \n        // Mint SY tokens 1:1 with underlying to the user\n        _mint(user, amount);\n        lastClaimTime[user] = block.timestamp;\n        \n        emit Wrap(user, amount, amount);\n    }\n    \n    /**\n     * @dev Unwrap SY tokens back to underlying tokens\n     */\n    function unwrap(uint256 amount) external nonReentrant {\n        if (amount == 0) revert AmountMustBeGreaterThanZero();\n        if (balanceOf(msg.sender) < amount) revert InsufficientSYBalance();\n        \n        _updateYield();\n        \n        // Burn SY tokens\n        _burn(msg.sender, amount);\n        \n        // Transfer underlying tokens back\n        underlyingToken.transfer(msg.sender, amount);\n        \n        emit Unwrap(msg.sender, amount, amount);\n    }\n    \n    /**\n     * @dev Calculate claimable yield for a user\n     */\n    function getClaimableYield(address user) public view returns (uint256) {\n        if (balanceOf(user) == 0 || lastClaimTime[user] == 0) {\n            return 0;\n        }\n        \n        uint256 timeElapsed = block.timestamp - lastClaimTime[user];\n        uint256 annualYield = (balanceOf(user) * yieldRate) / 10000;\n        uint256 yieldAmount = (annualYield * timeElapsed) / 365 days;\n        \n        return yieldAmount;\n    }\n    \n    /**\n     * @dev Claim accumulated yield\n     */\n    function claimYield() external nonReentrant {\n        if (block.timestamp >= maturity) revert TokenHasMatured();\n        \n        uint256 yieldAmount = getClaimableYield(msg.sender);\n        if (yieldAmount == 0) revert NoYieldToClaim();\n        \n        lastClaimTime[msg.sender] = block.timestamp;\n        totalYieldAccrued += yieldAmount;\n        \n        // Mint yield as new SY tokens\n        _mint(msg.sender, yieldAmount);\n        \n        emit YieldClaimed(msg.sender, yieldAmount);\n    }\n    \n    /**\n     * @dev Update global yield accumulation\n     */\n    function _updateYield() internal {\n        if (block.timestamp > lastYieldUpdate && totalSupply() > 0) {\n            uint256 timeElapsed = block.timestamp - lastYieldUpdate;\n            uint256 globalYield = (totalSupply() * yieldRate * timeElapsed) / (10000 * 365 days);\n            totalYieldAccrued += globalYield;\n            lastYieldUpdate = block.timestamp;\n        }\n    }\n    \n    /**\n     * @dev Check if token has matured\n     */\n    function hasMatured() external view returns (bool) {\n        return block.timestamp >= maturity;\n    }\n    \n    /**\n     * @dev Get time until maturity\n     */\n    function timeToMaturity() external view returns (uint256) {\n        if (block.timestamp >= maturity) {\n            return 0;\n        }\n        return maturity - block.timestamp;\n    }\n    \n    /**\n     * @dev Mint SY tokens to a specific address (only callable by SYFactory)\n     * @param to Address to mint tokens to\n     * @param amount Amount of tokens to mint\n     */\n    function mintTo(address to, uint256 amount) external {\n        // Only allow SYFactory to call this function\n        if (owner() != msg.sender) revert OnlyFactoryCanCall();\n        if (amount == 0) revert AmountMustBeGreaterThanZero();\n        if (block.timestamp >= maturity) revert TokenHasMatured();\n                \n        _mint(to, amount);\n        \n\n        \n        // Set lastClaimTime if this is the first time user receives tokens\n        if (lastClaimTime[to] == 0) {\n            lastClaimTime[to] = block.timestamp;\n        }\n    }\n    \n    /**\n     * @dev Burn SY tokens (only callable by SYFactory)\n     * @param from Address to burn tokens from\n     * @param amount Amount of tokens to burn\n     */\n    function burnFrom(address from, uint256 amount) external {\n        // Only allow SYFactory to call this function\n        if (owner() != msg.sender) revert OnlyFactoryCanCall();\n        if (amount == 0) revert AmountMustBeGreaterThanZero();\n        \n        // Debug: Check balance before burning\n        uint256 currentBalance = balanceOf(from);\n\n\n        \n        if (currentBalance < amount) {\n            revert InsufficientSYBalance(); // Debug: This will show if error is from burnFrom\n        }\n        \n        if (balanceOf(from) < amount) revert InsufficientSYBalance();\n        \n        _burn(from, amount);\n        \n\n    }\n    \n    /**\n     * @dev Override transfer to update yield tracking\n     */\n    function _update(address from, address to, uint256 value) internal virtual override {\n        if (from != address(0) && lastClaimTime[from] == 0) {\n            lastClaimTime[from] = block.timestamp;\n        }\n        if (to != address(0) && lastClaimTime[to] == 0) {\n            lastClaimTime[to] = block.timestamp;\n        }\n        \n        super._update(from, to, value);\n    }\n}\n"
    },
    "contracts/YTToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"./SYToken.sol\";\nimport \"./interfaces/IYTToken.sol\";\n\n/**\n * @title YTToken\n * @dev Yield Token representing the yield component of SY tokens\n */\ncontract YTToken is ERC20, Ownable, ReentrancyGuard, IYTToken {\n    \n    \n    SYToken public immutable syToken;\n    uint256 public immutable maturity;\n    \n    mapping(address => uint256) public lastClaimTime;\n    mapping(address => uint256) public totalYieldClaimed;\n    \n    // event YieldClaimed(address indexed user, uint256 yieldAmount);\n    \n    modifier onlyBeforeMaturity() {\n        if (block.timestamp >= maturity) revert TokenHasExpired();\n        _;\n    }\n    \n    constructor(\n        address _syToken,\n        string memory _name,\n        string memory _symbol\n    ) ERC20(_name, _symbol) Ownable(msg.sender) {\n        if (_syToken == address(0)) revert InvalidSYTokenAddress();\n        \n        syToken = SYToken(_syToken);\n        maturity = syToken.maturity();\n    }\n    \n    /**\n     * @dev Mint YT tokens (only callable by SYFactory)\n     */\n    function mint(address to, uint256 amount) external onlyOwner onlyBeforeMaturity {\n        _mint(to, amount);\n        if (lastClaimTime[to] == 0) {\n            lastClaimTime[to] = block.timestamp;\n        }\n    }\n    \n    /**\n     * @dev Burn YT tokens (only callable by SYFactory)\n     */\n    function burn(address from, uint256 amount) external onlyOwner {\n        _burn(from, amount);\n    }\n    \n    /**\n     * @dev Calculate claimable yield for a user\n     */\n    function getClaimableYield(address user) public view returns (uint256) {\n        if (balanceOf(user) == 0 || lastClaimTime[user] == 0 || block.timestamp >= maturity) {\n            return 0;\n        }\n        \n        uint256 timeElapsed = block.timestamp - lastClaimTime[user];\n        uint256 yieldRate = syToken.yieldRate();\n        uint256 annualYield = (balanceOf(user) * yieldRate) / 10000;\n        uint256 yieldAmount = (annualYield * timeElapsed) / 365 days;\n        \n        return yieldAmount;\n    }\n    \n    /**\n     * @dev Claim accumulated yield\n     */\n    function claimYield() external nonReentrant onlyBeforeMaturity {\n        uint256 yieldAmount = getClaimableYield(msg.sender);\n        if (yieldAmount == 0) revert NoYieldToClaim();\n        \n        lastClaimTime[msg.sender] = block.timestamp;\n        totalYieldClaimed[msg.sender] += yieldAmount;\n        \n        // Transfer yield from SY contract (as underlying tokens)\n        syToken.underlyingToken().transfer(msg.sender, yieldAmount);\n        \n        emit YieldClaimed(msg.sender, yieldAmount);\n    }\n    \n    /**\n     * @dev Check if token has expired\n     */\n    function hasExpired() external view returns (bool) {\n        return block.timestamp >= maturity;\n    }\n    \n    /**\n     * @dev Get time until expiry\n     */\n    function timeToExpiry() external view returns (uint256) {\n        if (block.timestamp >= maturity) {\n            return 0;\n        }\n        return maturity - block.timestamp;\n    }\n    \n    /**\n     * @dev Get total yield claimed by user\n     */\n    function getTotalYieldClaimed(address user) external view returns (uint256) {\n        return totalYieldClaimed[user];\n    }\n    \n    /**\n     * @dev Override transfer to update yield tracking\n     */\n    function _update(address from, address to, uint256 value) internal virtual override{\n        // Claim any pending yield before transfer\n        if (from != address(0) && balanceOf(from) > 0) {\n            uint256 pendingYield = getClaimableYield(from);\n            if (pendingYield > 0) {\n                lastClaimTime[from] = block.timestamp;\n                totalYieldClaimed[from] += pendingYield;\n                syToken.underlyingToken().transfer(from, pendingYield);\n                emit YieldClaimed(from, pendingYield);\n            }\n        }\n        \n        if (to != address(0) && lastClaimTime[to] == 0) {\n            lastClaimTime[to] = block.timestamp;\n        }\n        \n        super._update(from, to, value);\n    }\n}\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 1,
      "details": {
        "yul": true
      }
    },
    "metadata": {
      "bytecodeHash": "none"
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}